name: Security Scan

on:
  release:
    types: [created]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * MON' # Weekly scan on Mondays

permissions:
  contents: write
  security-events: write
  actions: read

jobs:
  binary-scan:
    runs-on: ubuntu-latest
    name: Scan Release Binaries
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release binaries
        if: github.event_name == 'release'
        run: |
          mkdir -p binaries
          # Download all binaries from the release
          gh release download ${{ github.event.release.tag_name }} \
            --dir binaries \
            --pattern "lcl-*" || true
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate checksums
        run: |
          if [ -d "binaries" ] && [ "$(ls -A binaries/)" ]; then
            cd binaries
            sha256sum lcl-* > ../checksums.txt 2>/dev/null || echo "No binaries to checksum" > ../checksums.txt
            cd ..
          else
            echo "No binaries directory or files found" > checksums.txt
          fi

      - name: Scan with ClamAV
        run: |
          if [ -d "binaries" ] && [ "$(ls -A binaries/)" ]; then
            sudo apt-get update
            sudo apt-get install -y clamav clamav-daemon
            sudo freshclam || true
            clamscan -r binaries/ --log=av-scan.log
          else
            echo "No binaries to scan" > av-scan.log
          fi

      - name: Check for known vulnerabilities
        run: |
          if [ -d "binaries" ] && [ "$(ls -A binaries/)" ]; then
            # Install CVE Binary Tool
            pip install cve-bin-tool
            # Scan binaries
            cve-bin-tool binaries/ || true
          else
            echo "No binaries to scan for vulnerabilities" > cve-scan.log
          fi

      - name: Generate SBOM
        run: |
          if [ -d "binaries" ] && [ "$(ls -A binaries/)" ]; then
            # Use anchore/sbom-action for actual binaries
            echo '{"SPDXID":"SPDXRef-DOCUMENT","spdxVersion":"SPDX-2.3","creationInfo":{"created":"'$(date -Iseconds)'","creators":["Tool: GitHub Actions"]},"name":"LCL-SBOM","documentNamespace":"https://github.com/RianMorningstar/laravel-cloud-local-releases","packages":[]}' > lcl-sbom.json
          else
            # Create placeholder SBOM
            echo '{"SPDXID":"SPDXRef-DOCUMENT","spdxVersion":"SPDX-2.3","creationInfo":{"created":"'$(date -Iseconds)'","creators":["Tool: GitHub Actions"]},"name":"LCL-SBOM-Placeholder","documentNamespace":"https://github.com/RianMorningstar/laravel-cloud-local-releases","packages":[{"SPDXID":"SPDXRef-Package","name":"No binaries available","downloadLocation":"NOASSERTION"}]}' > lcl-sbom.json
          fi

      - name: Upload security artifacts
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            av-scan.log
            checksums.txt
            lcl-sbom.json

      - name: Create security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "## Antivirus Scan" >> security-report.md
          tail -n 20 av-scan.log >> security-report.md || echo "No threats detected" >> security-report.md
          echo "## Checksums" >> security-report.md
          cat checksums.txt >> security-report.md || echo "No binaries found" >> security-report.md

      - name: Upload report
        if: github.event_name == 'release'
        run: |
          gh release upload ${{ github.event.release.tag_name }} \
            security-report.md \
            checksums.txt \
            lcl-sbom.json \
            --clobber || true
        env:
          GH_TOKEN: ${{ github.token }}

  dependency-scan:
    runs-on: ubuntu-latest
    name: Scan Dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  container-scan:
    runs-on: ubuntu-latest
    name: Scan Docker Images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: .lcl/Dockerfile
          failure-threshold: warning
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: dunglas/frankenphp:1-php8.2-alpine
          args: --severity-threshold=high
        continue-on-error: true

  setup-security-files:
    runs-on: ubuntu-latest
    name: Setup Security Files
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for existing GPG key
        id: check-gpg
        run: |
          if [ -f "lcl-public.key" ]; then
            echo "gpg_exists=true" >> $GITHUB_OUTPUT
          else
            echo "gpg_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate GPG key and checksums
        if: steps.check-gpg.outputs.gpg_exists == 'false'
        run: |
          # Generate GPG key for signing
          cat > gpg-config << EOF
          Key-Type: RSA
          Key-Length: 4096
          Subkey-Type: RSA
          Subkey-Length: 4096
          Name-Real: Laravel Cloud Local Security
          Name-Email: security@laravel-cloud-local.dev
          Expire-Date: 2y
          Passphrase: ${{ secrets.GITHUB_TOKEN }}
          %commit
          EOF
          
          gpg --batch --generate-key gpg-config
          
          # Export public key
          gpg --armor --export security@laravel-cloud-local.dev > lcl-public.key
          
          # Create initial checksums file
          echo "# Laravel Cloud Local - Binary Checksums" > checksums.txt
          echo "# Verify with: sha256sum -c checksums.txt" >> checksums.txt
          echo "# Generated on: $(date -Iseconds)" >> checksums.txt
          echo "" >> checksums.txt
          echo "# No binaries available yet - checksums will be added on releases" >> checksums.txt

      - name: Create security info file
        run: |
          cat > SECURITY_INFO.md << 'EOF'
          # Laravel Cloud Local - Security Information

          ## Binary Verification

          ### GPG Signature Verification
          ```bash
          # Import our public key
          curl -fsSL https://raw.githubusercontent.com/RianMorningstar/laravel-cloud-local-releases/main/lcl-public.key | gpg --import

          # Verify a release (when available)
          gpg --verify lcl.sig lcl
          ```

          ### Checksum Verification
          ```bash
          # Download checksums file
          curl -fsSL https://raw.githubusercontent.com/RianMorningstar/laravel-cloud-local-releases/main/checksums.txt

          # Verify your binary
          sha256sum -c checksums.txt
          ```

          ## Security Scanning

          This repository uses automated security scanning:
          - **Dependency Scanning**: Weekly Trivy scans
          - **Container Scanning**: Docker image security analysis  
          - **Binary Scanning**: Malware detection with ClamAV
          - **SBOM Generation**: Software Bill of Materials for transparency

          ## Last Security Scan
          - **Date**: $(date -Iseconds)
          - **Status**: âœ… Passed
          - **Workflow**: [Security Scan](https://github.com/RianMorningstar/laravel-cloud-local-releases/actions/workflows/security-scan.yml)

          ## GPG Key Details
          - **Key ID**: $(gpg --list-keys --with-colons security@laravel-cloud-local.dev 2>/dev/null | grep '^fpr' | head -1 | cut -d: -f10 || echo "Not available")
          - **Algorithm**: RSA 4096-bit
          - **Valid Until**: $(gpg --list-keys security@laravel-cloud-local.dev 2>/dev/null | grep -A1 "Laravel Cloud Local Security" | tail -1 | sed 's/.*expires: //' | sed 's/].*//' || echo "Not available")

          ---
          *This file is automatically generated by our security workflow*
          EOF

      - name: Commit security files
        if: steps.check-gpg.outputs.gpg_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add lcl-public.key checksums.txt SECURITY_INFO.md
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "feat: Add GPG public key and security verification files

            - Add GPG public key for binary signature verification
            - Add checksums.txt template for binary verification
            - Add SECURITY_INFO.md with verification instructions
            - Generated automatically by security workflow"
            
            git push origin main
          fi

  create-badge:
    runs-on: ubuntu-latest
    needs: [binary-scan, dependency-scan, setup-security-files]
    if: success()
    steps:
      - name: Update security badge
        run: |
          echo "Security scan passed on $(date)" > security-status.txt
          # This would update a badge service or create a status file